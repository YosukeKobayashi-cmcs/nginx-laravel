# 参考URL Windows10にnginx+PHP環境の構築 https://qiita.com/suke/items/4936809289ffe0dc782b

# [todo 変更] ワーカープロセスを実行するユーザーの指定 必要であれば設定
# user  nobody;

# ワーカープロセス（クライアントからリクエストを受け付けて処理するnginxの子プロセス）の数
# システムのCPUコア数に合わせてworker_processesの値を設定すると良い
# [todo 変更] 下記は4コアのCPUがある場合の設定
worker_processes  4;

# プロセスIDを保存するファイルの場所
# NginxのマスタープロセスのPIDを簡単に確認可能
# プロセスの管理やデバッグに役立ちます。例えば、Nginxを再起動したり、停止したりする際には、マスタープロセスのPIDを知る必要があります。
pid        logs/nginx.pid;

events {
    # 1ワーカープロセスあたりの最大コネクション数の値
    worker_connections  1024;
}

http {
    #### MIMEタイプの設定
    include       mime.types; #拡張子とMIMEタイプの対応ファイルを読み込む
    default_type  application/octet-stream; #拡張子からMIMEタイプを判断できなかった場合のMIMEタイプ

    #### アクセスログの設定
    # アクセスログの書式の設定、main形式を下記の形式で指定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #### クライアントへの送信（レスポンス）に関する設定
    # クライアントへの送信にsendfileシステムコールを使うか
    # 静的ファイルの配信速度を向上
    sendfile        on;

    # keepaliveのタイムアウト時間の設定、65秒
    keepalive_timeout  65;

    # クライアントにコンテンツを送信する際に圧縮転送するかどうかの設定
    gzip  on;

    # Webサーバーのバージョン非表示化
    # 参考: https://town.biz/blog/1932
    server_tokens off;

    #### バーチャルサーバーの設定
    server {
        # POSTできる容量の設定
        # [todo 変更] 要調整
        client_max_body_size 100M;

        #### サーバーの基本設定

        # [todo 変更] リクエストを受け付けるIPアドレスやポート番号を設定 ポートを変更する場合は下記のポート番号を変更
        listen       80;
        # SSL(HTTPS)の設定 必要であれば下記に変更
        # listen       80 ssl;

        # OODLE脆弱性対策 使えるプロトコルをTLS1, 1.1, 1.2のみとする SSLv3は無効化
        # 参考: https://qiita.com/nayuneko/items/a3b326e2e9466e4117d6
        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2; 

        # バーチャルサーバーのホスト名を設定
        # [todo 変更] 環境によって変更すること
        # 開発環境: ローカル開発環境でテストや開発を行う場合、localhostをserver_nameとして設定
        # 本番環境: 本番環境では、実際のドメイン名（例：example.com）をserver_nameに設定
        server_name  localhost;

        # [todo 変更] SSL(HTTPS)の設定 必要であればコメントアウトを外す、パスの変更が必要
        # ssl_certificate C:/Users/parma/git/cmc/nginx/nginx-1.26.0/conf/ssl/certs/localhost/cert.pem; # SSL証明書のパス
        # ssl_certificate_key C:/Users/parma/git/cmc/nginx/nginx-1.26.0/conf/ssl/certs/localhost/key.pem; # 秘密鍵のパス

        # [todo 変更] rootドキュメントを指定、windowsでも「\」ではなく「/」でディレクトリ階層を指定、パスの変更が必要
        # 本番
        # root  C:/var/www/sksr2a.efa.daifuku.com/public
        # 開発環境
        root  C:/Users/parma/git/sksr2_source_2022_01_forked/sksr2a.efa.daifuku.com/public;
        # indexファイル名を設定、
        # URLが「/」で終わってるものに対してインデックスとして使われるファイル名の指定
        index  index.html index.php;  #前から順番に適用される

        #### サーバー別のログの設定
        # ログローテーションの設定　アクセスログのみローテーション可能
        # 参考: https://qiita.com/ngsw/items/a35daa78d098178ec7a5
        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})") {
            set $year $1;
            set $month $2;
            set $day $3;
        }
        # アクセスログの出力先と出力形式の設定、main形式で出力
        # access_log  logs/access.log  main;
        access_log logs/access.log-$year-$month-$day main;
        # エラーログの出力先とロギングレベルの設定、
        error_log  logs/error.log  notice;

        # 静的ファイル設定  
        # 画像やCSSファイルなどのリクエストを直接処理し、それ以外のリクエストをindex.phpにリダイレクトする設定
        location / { try_files $uri $uri/ /index.php?$query_string; }

        #### エラーページの設定
        # [todo 変更] nginx-1.26.0\html\50x.htmlの内容を変更してカスタマイズすること
        #error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html; #エラーページのパスを設定
        location = /50x.html { #「/50x.html」にパスが完全一致、一致したら切り上げ
            root   html;
        }

        #### アクセス制限設定
        # .ht〜 ファイル(.htaccess や .htpasswd) が外部から意図せずアクセスできる状態にならないように設定
        location ~* \.ht.*$ {
            deny all;
        }

        #### PHPの設定
        # 正規表現、パスが「xxxx.php」や「aaa/xxxx.php」や「abc/xxxx.php/bbbb」などに一致
        location ~ [^/]\.php(/|$) {

            # クリックジャッキング対策設定
            # 参考 https://town.biz/blog/1932
            add_header x-frame-options "SAMEORIGIN";

            # XSSフィルター機能設定
            # 参考 https://town.biz/blog/1932
            add_header x-xss-protection "1; mode=block";

            # MIMEタイプのスニッフィング対策設定
            # 参考 https://town.biz/blog/1932
            add_header x-content-type-options "nosniff";

            # HTST（中間者攻撃対策）設定
            # 参考 https://town.biz/blog/1932
            add_header Strict-Transport-Security "max-age=63072000";

            # クロスサイトスクリプティング (XSS) やデータインジェクション攻撃を含む、よく知られた種類の攻撃を検出して軽減するための設定
            # [todo 変更] 必要であれば設定すること
            # 外部スクリプトの読み込みを許可する場合は、script-srcの値を変更すること
            # 参考 https://qiita.com/hideji2/items/1421f9bff2a97a5e5794
            # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' img-src 'self' style-src 'self' 'unsafe-inline' https://fonts.googleapis.com 'self' https://themes.googleusercontent.com; frame-src 'none' object-src 'none'";

            # $fastcgi_path_info の値をキャプチャする正規表現を定義
            # 一つ目の()が $fastcgi_script_name の値になり、二つ目は $fastcgi_path_info の値になる
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            # $document_root ルートディレクトリで設定したパス
            # $fastcgi_script_name ファイル名のパス
            # -f はファイルが存在するかの判定
            # ファイルがなければ404エラーを返す
            if (!-f $document_root$fastcgi_script_name) {
                return 404;
            }

            # phpへアクセスするためのIPアドレスとポートの設定
            fastcgi_pass   127.0.0.1:9000;
            # phpでのindexファイル名を設定、
            # URLが「/」で終わってるものに対してインデックスとして使われるファイル名の指定
            fastcgi_index  index.php;

            #### fastcgi_param に関する設定
            # 多数のfastcgi_paramsの設定が書いてあるfastcgi_paramsファイルを読み込む
            include        fastcgi_params;
            # 「HTTP_PROXY」パラメータを空にする、HTTPoxyに関する脆弱性を和らげる
            fastcgi_param  HTTP_PROXY "";
            # 「SCRIPT_FILENAME」パラメータはphp-fpmがスクリプト名を決定するための設定
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        }
    }
}